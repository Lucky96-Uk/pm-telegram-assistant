import logging
import json
import os
import csv
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ContentType
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
import dateparser  # –î–æ–¥–∞–Ω–æ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
DATA_FILE = "pm_manager_data.json"
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE" # üîê –í–ê–ñ–õ–ò–í–û: –≤—Å—Ç–∞–≤—Ç–µ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω, –æ—Ç—Ä–∏–º–∞–Ω–∏–π —á–µ—Ä–µ–∑ @BotFather
EXPORT_FOLDER = "exports"
DEFAULT_CATEGORIES = ["–†–æ–±–æ—Ç–∞", "–û—Å–æ–±–∏—Å—Ç–µ", "–ù–∞–≤—á–∞–Ω—î"]

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–¥–∞–Ω–æ –Ω–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É)
if not BOT_TOKEN or len(BOT_TOKEN) < 30:
    logger.error("–ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞!")
    exit(1)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
os.makedirs(EXPORT_FOLDER, exist_ok=True)

try:
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    scheduler = AsyncIOScheduler()
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
    exit(1)

# –î–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (max 3 –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
user_messages = {}

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –Ω–µ–±–∞–∂–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É
@dp.message(F.content_type.in_({
    ContentType.PHOTO,
    ContentType.VIDEO,
    ContentType.DOCUMENT,
    ContentType.AUDIO,
    ContentType.VOICE,
    ContentType.VIDEO_NOTE,
    ContentType.STICKER,
    ContentType.LOCATION,
    ContentType.CONTACT,
    ContentType.POLL
}))
async def handle_unwanted_content(message: types.Message):
    await message.answer("‚ùå –¶–µ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–µ–∫—Å—Ç.")

# –ö–ª–∞—Å–∏ —Å—Ç–∞–Ω—ñ–≤
class ReminderStates(StatesGroup):
    waiting_for_reminder_task = State()
    waiting_for_reminder_time = State()

class TaskStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_deadline = State()
    waiting_for_category = State()
    waiting_for_task_delete = State()
    waiting_for_task_complete = State()
    waiting_for_task_uncomplete = State()

class NoteStates(StatesGroup):
    waiting_for_task_selection = State()
    waiting_for_text = State()
    waiting_for_category = State()
    waiting_for_note_delete = State()

class SearchStates(StatesGroup):
    waiting_for_search_query = State()

class ExportStates(StatesGroup):
    waiting_for_export_format = State()

class SettingsStates(StatesGroup):
    waiting_for_new_category = State()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏
def load_data():
    default_data = {
        "tasks": [],
        "notes": [],
        "categories": DEFAULT_CATEGORIES.copy(),
        "statistics": {}
    }
    
    if not os.path.exists(DATA_FILE):
        return default_data
    
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
            # –ú—ñ–≥—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
            if isinstance(data.get("tasks", []), list) and len(data.get("tasks", [])) > 0 and isinstance(data["tasks"][0], str):
                data["tasks"] = [{
                    "text": task.split(" ‚Äî ")[0], 
                    "deadline": task.split(" ‚Äî ")[1] if " ‚Äî " in task else "", 
                    "category": "", 
                    "created": str(datetime.now()),
                    "completed": False,
                    "completed_at": None
                } for task in data.get("tasks", [])]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–ª—ñ–≤
            for task in data.get("tasks", []):
                task.setdefault("completed", False)
                task.setdefault("completed_at", None)
                task.setdefault("created", str(datetime.now()))
            
            return {
                "tasks": data.get("tasks", []),
                "notes": data.get("notes", []),
                "categories": data.get("categories", DEFAULT_CATEGORIES.copy()),
                "statistics": data.get("statistics", {})
            }
    except (json.JSONDecodeError, KeyError, AttributeError) as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}, –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –¥–∞–Ω—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
        return default_data

def save_data(data):
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
            with open(DATA_FILE + ".backup", 'w', encoding='utf-8') as f_backup:
                json.dump(data, f_backup, ensure_ascii=False, indent=2)
            logger.info("–°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –¥–∞–Ω–∏—Ö")
        except Exception as backup_e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó: {backup_e}")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
data = load_data()
tasks = data.get("tasks", [])
notes = data.get("notes", [])
categories = data.get("categories", DEFAULT_CATEGORIES.copy())
statistics = data.get("statistics", {})

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (–∫–µ—à–æ–≤–∞–Ω—ñ –≤–µ—Ä—Å—ñ—ó)
_main_menu_kb = None
_back_kb = None

def get_main_menu_kb():
    global _main_menu_kb
    if _main_menu_kb is None:
        builder = ReplyKeyboardBuilder()
        builder.row(
            types.KeyboardButton(text="üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ"),
            types.KeyboardButton(text="üß† –ù–æ—Ç–∞—Ç–∫–∏"),
        )
        builder.row(
            types.KeyboardButton(text="üìÑ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–¥–∞—á—ñ"),
            types.KeyboardButton(text="üßæ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ—Ç–∞—Ç–∫–∏"),
        )
        builder.row(
            types.KeyboardButton(text="‚úÖ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ –∑–∞–¥–∞—á—É"),
            types.KeyboardButton(text="üîÑ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—É"),
        )
        builder.row(
            types.KeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É"),
            types.KeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É"),
        )
        builder.row(
            types.KeyboardButton(text="üîç –ü–æ—à—É–∫"),
            types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        )
        builder.row(
            types.KeyboardButton(text="‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"),
        )
        _main_menu_kb = builder.as_markup(resize_keyboard=True)
    return _main_menu_kb

def get_back_kb():
    global _back_kb
    if _back_kb is None:
        builder = ReplyKeyboardBuilder()
        builder.add(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
        _back_kb = builder.as_markup(resize_keyboard=True)
    return _back_kb

def get_tasks_kb(completed=False):
    builder = ReplyKeyboardBuilder()
    for i, task in enumerate(tasks):
        if task.get("completed", False) == completed:
            builder.add(types.KeyboardButton(text=f"{i+1}. {task['text']}"))
    builder.add(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_categories_kb():
    builder = ReplyKeyboardBuilder()
    for category in categories:
        builder.add(types.KeyboardButton(text=category))
    builder.add(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_export_kb():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üìù TXT", callback_data="export_txt"))
    builder.add(types.InlineKeyboardButton(text="üìä CSV", callback_data="export_csv"))
    builder.add(types.InlineKeyboardButton(text="üìë JSON", callback_data="export_json"))
    builder.adjust(3)
    return builder.as_markup()

def get_tasks_for_notes_kb():
    builder = ReplyKeyboardBuilder()
    for i, task in enumerate(tasks):
        if not task.get("completed", False):
            builder.add(types.KeyboardButton(text=f"{i+1}. {task['text']}"))
    builder.add(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start", "cancel"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    msg = await message.answer(
        "<b>üî¥ –í—ñ—Ç–∞—é!</b> –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n"
        "<b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:</b>", 
        reply_markup=get_main_menu_kb(),
        parse_mode="HTML"
    )
    await manage_messages(message.chat.id, msg.message_id, bot)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
@dp.message(F.text == "üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ")
async def add_task_start(message: types.Message, state: FSMContext):
    await state.set_state(TaskStates.waiting_for_text)
    msg = await message.answer(
        "üìå –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ:",
        reply_markup=get_back_kb()
    )
    await manage_messages(message.chat.id, msg.message_id, bot)

@dp.message(TaskStates.waiting_for_text)
async def process_task_text(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
        
    await state.update_data(task_text=message.text)
    await state.set_state(TaskStates.waiting_for_deadline)
    await message.answer(
        "üóì –í–≤–µ–¥—ñ—Ç—å –¥–µ–¥–ª–∞–π–Ω –¥–ª—è —Ü—ñ—î—ó –∑–∞–¥–∞—á—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '15.12' –∞–±–æ '—á–µ—Ä–µ–∑ 3 –¥–Ω—ñ'):",
        reply_markup=get_back_kb()
    )

@dp.message(TaskStates.waiting_for_deadline)
async def process_task_deadline(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    await state.update_data(deadline=message.text)
    await state.set_state(TaskStates.waiting_for_category)
    await message.answer(
        "üè∑ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –∑–∞–¥–∞—á—ñ:",
        reply_markup=get_categories_kb()
    )

@dp.message(TaskStates.waiting_for_category)
async def process_task_category(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—îmos—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    if message.text not in categories:
        await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ù–∞–∑–∞–¥¬ª")
        return
    
    task_data = await state.get_data()
    task = {
        "text": task_data.get("task_text", ""),
        "deadline": task_data.get("deadline", ""),
        "category": message.text,
        "created": str(datetime.now()),
        "completed": False,
        "completed_at": None
    }
    tasks.append(task)
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_key = f"tasks_{datetime.now().strftime('%Y-%m')}"
    statistics[stats_key] = statistics.get(stats_key, 0) + 1
    save_data({"tasks": tasks, "notes": notes, "categories": categories, "statistics": statistics})
    
    await state.clear()
    await message.answer(
        "‚úÖ –ó–∞–¥–∞—á—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        reply_markup=get_main_menu_kb()
    )

# –í—ñ–¥–º—ñ—Ç–∫–∞ –∑–∞–¥–∞—á —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö/–Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö
@dp.message(F.text == "‚úÖ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ –∑–∞–¥–∞—á—É")
async def complete_task_start(message: types.Message, state: FSMContext):
    if not tasks:
        await message.answer("‚ùå –ù–µ–º–∞—î –∑–∞–¥–∞—á –¥–ª—è –≤—ñ–¥–º—ñ—Ç–∫–∏.", reply_markup=get_main_menu_kb())
        return
    
    active_tasks = [t for t in tasks if not t.get("completed", False)]
    if not active_tasks:
        await message.answer("‚ùå –í—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ.", reply_markup=get_main_menu_kb())
        return
    
    await state.set_state(TaskStates.waiting_for_task_complete)
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –≤—ñ–¥–º—ñ—Ç–∫–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É:",
        reply_markup=get_tasks_kb(completed=False)
    )

@dp.message(TaskStates.waiting_for_task_complete)
async def process_task_complete(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    if message.text.split(". ")[0].isdigit():
        task_num = int(message.text.split(". ")[0]) - 1
        if 0 <= task_num < len(tasks) and not tasks[task_num].get("completed", False):
            tasks[task_num]["completed"] = True
            tasks[task_num]["completed_at"] = str(datetime.now())
            save_data({"tasks": tasks, "notes": notes, "categories": categories, "statistics": statistics})
            await state.clear()
            await message.answer(
                f"‚úÖ –ó–∞–¥–∞—á—É '{tasks[task_num]['text']}' –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É.",
                reply_markup=get_main_menu_kb()
            )
            return
    
    await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ù–∞–∑–∞–¥¬ª")

@dp.message(F.text == "üîÑ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—É")
async def uncomplete_task_start(message: types.Message, state: FSMContext):
    if not tasks:
        await message.answer("‚ùå –ù–µ–º–∞—î –∑–∞–¥–∞—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó.", reply_markup=get_main_menu_kb())
        return
    
    completed_tasks = [t for t in tasks if t.get("completed", False)]
    if not completed_tasks:
        await message.answer("‚ùå –ù–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á.", reply_markup=get_main_menu_kb())
        return
    
    await state.set_state(TaskStates.waiting_for_task_uncomplete)
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó:",
        reply_markup=get_tasks_kb(completed=True)
    )

@dp.message(TaskStates.waiting_for_task_uncomplete)
async def process_task_uncomplete(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    if message.text.split(". ")[0].isdigit():
        task_num = int(message.text.split(". ")[0]) - 1
        if 0 <= task_num < len(tasks) and tasks[task_num].get("completed", False):
            tasks[task_num]["completed"] = False
            tasks[task_num]["completed_at"] = None
            save_data({"tasks": tasks, "notes": notes, "categories": categories, "statistics": statistics})
            await state.clear()
            await message.answer(
                f"üîÑ –ó–∞–¥–∞—á—É '{tasks[task_num]['text']}' –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∑–Ω–æ–≤—É.",
                reply_markup=get_main_menu_kb()
            )
            return
    
    await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ù–∞–∑–∞–¥¬ª")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
    completed_tasks = sum(1 for task in tasks if task.get("completed", False))
    active_tasks = len(tasks) - completed_tasks
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–¥–∞—á
    overdue_tasks = 0
    for task in tasks:
        if not task.get("completed", False) and task.get("deadline"):
            deadline = parse_deadline(task["deadline"])
            if deadline and deadline < datetime.now():
                overdue_tasks += 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º
    category_stats = {}
    for category in categories:
        category_tasks = sum(1 for task in tasks if task.get("category", "") == category)
        category_notes = sum(1 for note in notes if note.get("category", "") == category)
        if category_tasks or category_notes:
            category_stats[category] = (category_tasks, category_notes)
    
    response = [
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:",
        f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–¥–∞—á: {completed_tasks}",
        f"üîÑ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á: {active_tasks}",
        f"‚è∞ –ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ: {overdue_tasks}",
        f"üìù –í—Å—å–æ–≥–æ –Ω–æ—Ç–∞—Ç–æ–∫: {len(notes)}",
        "\nüìå –ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:"
    ]
    
    for category, (task_count, note_count) in category_stats.items():
        response.append(f"  {category}: –∑–∞–¥–∞—á - {task_count}, –Ω–æ—Ç–∞—Ç–æ–∫ - {note_count}")
    
    # –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (—Ç–µ–∫—Å—Ç–æ–≤–∏–π)
    months = sorted(statistics.keys())
    if months:
        response.append("\nüìà –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–æ –º—ñ—Å—è—Ü—è—Ö:")
        for month in months[-6:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤
            response.append(f"  {month}: {statistics[month]} –∑–∞–¥–∞—á")
    
    await message.answer("\n".join(response), reply_markup=get_main_menu_kb())

# –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–¥–∞—á
@dp.message(F.text == "üìÑ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–¥–∞—á—ñ")
async def show_tasks(message: types.Message):
    if not tasks:
        await message.answer("‚ùå –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–¥–∞—á.", reply_markup=get_main_menu_kb())
        return
    
    tasks_list = []
    for i, task in enumerate(tasks):
        status = "‚úÖ" if task.get("completed", False) else "‚ùå"
        deadline = f" ‚Äî {task['deadline']}" if task.get("deadline") else ""
        completed_at = f" (–∑–∞–≤–µ—Ä—à–µ–Ω–æ {task['completed_at']})" if task.get("completed_at") else ""
        tasks_list.append(f"{i+1}. {status} {task['text']}{deadline} ({task['category']}){completed_at}")
    
    await message.answer(
        f"üìã –í–∞—à—ñ –∑–∞–¥–∞—á—ñ:\n" + "\n".join(tasks_list),
        reply_markup=get_back_kb()  # –¢–µ–ø–µ—Ä —Ç—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    )

@dp.callback_query(F.data == "complete_task")
async def complete_task(callback: types.CallbackQuery):
    if not tasks:
        await callback.answer("–ù–µ–º–∞—î –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è")
        return
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à—É –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—É –∑–∞–¥–∞—á—É
    for i, task in enumerate(tasks):
        if not task.get("completed", False):
            task["completed"] = True
            task["completed_at"] = str(datetime.now())
            save_data({"tasks": tasks, "notes": notes, "categories": categories, "statistics": statistics})
            await callback.message.edit_text(
                f"üìã –í–∞—à—ñ –∑–∞–¥–∞—á—ñ:\n" + "\n".join(
                    f"{j+1}. {'‚úÖ' if t.get('completed', False) else '‚ùå'} {t['text']} ‚Äî {t['deadline']} ({t['category']})"
                    + (f" (–∑–∞–≤–µ—Ä—à–µ–Ω–æ {t['completed_at']})" if t.get("completed_at") else "")
                    for j, t in enumerate(tasks)
                ),
                reply_markup=get_tasks_kb()
            )
            await callback.answer(f"–ó–∞–¥–∞—á—É '{task['text']}' –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É")
            return
    
    await callback.answer("–í—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ")

@dp.message(F.text == "üîç –ü–æ—à—É–∫")
async def search_start(message: types.Message, state: FSMContext):
    await state.set_state(SearchStates.waiting_for_search_query)
    await message.answer(
        "üîç –í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç (–º–æ–∂–Ω–∞ —à—É–∫–∞—Ç–∏ –∑–∞–¥–∞—á—ñ, –Ω–æ—Ç–∞—Ç–∫–∏ –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó):",
        reply_markup=get_back_kb()
    )

@dp.message(SearchStates.waiting_for_search_query)
async def process_search(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —É–º–æ–≤—É
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    search_query = message.text.lower()
    results = []
    
    # –ü–æ—à—É–∫ —É –∑–∞–¥–∞—á–∞—Ö
    task_results = []
    for i, task in enumerate(tasks):
        if (search_query in task['text'].lower() or 
            search_query in task['category'].lower() or 
            search_query in task.get('deadline', '').lower()):
            status = "‚úÖ" if task.get("completed", False) else "‚ùå"
            deadline = f" ‚Äî {task['deadline']}" if task.get("deadline") else ""
            task_results.append(f"{i+1}. {status} {task['text']}{deadline} ({task['category']})")
    
    if task_results:
        results.append("üìã –ó–Ω–∞–π–¥–µ–Ω—ñ –∑–∞–¥–∞—á—ñ:\n" + "\n".join(task_results))
    
    # –ü–æ—à—É–∫ —É –Ω–æ—Ç–∞—Ç–∫–∞—Ö
    note_results = []
    for i, note in enumerate(notes):
        if (search_query in note['text'].lower() or 
            search_query in note['category'].lower()):
            task_text = tasks[note.get("task_id", 0)].get("text", "–ù–µ–≤—ñ–¥–æ–º–∞ –∑–∞–¥–∞—á–∞")  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            note_results.append(f"{i+1}. {note['text']} (–¥–æ –∑–∞–¥–∞—á—ñ: '{task_text}', {note['category']})")
    
    if note_results:
        results.append("\nüßæ –ó–Ω–∞–π–¥–µ–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏:\n" + "\n".join(note_results))
    
    # –ü–æ—à—É–∫ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    category_results = [cat for cat in categories if search_query in cat.lower()]
    if category_results:
        results.append("\nüè∑ –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n" + ", ".join(category_results))
    
    if results:
        await message.answer("\n".join(results), 
                           reply_markup=ReplyKeyboardMarkup(
                               keyboard=[
                                   [KeyboardButton(text="üîç –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ—à—É–∫")],
                                   [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                               ],
                               resize_keyboard=True
                           ))
    else:
        await message.answer("üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º.",
                           reply_markup=ReplyKeyboardMarkup(
                               keyboard=[
                                   [KeyboardButton(text="üîç –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ—à—É–∫")],
                                   [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                               ],
                               resize_keyboard=True
                           ))
    
    await state.set_state(SearchStates.waiting_for_search_query)  # –ù–µ –æ—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
    

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫
@dp.message(F.text == "üß† –ù–æ—Ç–∞—Ç–∫–∏")
async def add_note_start(message: types.Message, state: FSMContext):
    if not tasks:
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É –∑–∞–¥–∞—á—É, –¥–æ —è–∫–æ—ó –º–æ–∂–Ω–∞ –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É.", reply_markup=get_main_menu_kb())
        return
    
    await state.set_state(NoteStates.waiting_for_task_selection)
    await message.answer(
        "üìå –û–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É, –¥–æ —è–∫–æ—ó –≤—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –Ω–æ—Ç–∞—Ç–∫–∞:",
        reply_markup=get_tasks_for_notes_kb()
    )

@dp.message(NoteStates.waiting_for_task_selection)
async def process_note_task_selection(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    if message.text.split(". ")[0].isdigit():
        task_num = int(message.text.split(". ")[0]) - 1
        if 0 <= task_num < len(tasks):
            await state.update_data(task_id=task_num)
            await state.set_state(NoteStates.waiting_for_text)
            await message.answer(
                "üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏:",
                reply_markup=get_back_kb()
            )
            return
    
    await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ù–∞–∑–∞–¥¬ª")

@dp.message(NoteStates.waiting_for_text)
async def process_note_text(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    await state.update_data(note_text=message.text)
    await state.set_state(NoteStates.waiting_for_category)
    await message.answer(
        "üè∑ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –Ω–æ—Ç–∞—Ç–∫–∏:",
        reply_markup=get_categories_kb()
    )

@dp.message(NoteStates.waiting_for_category)
async def process_note_category(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    if message.text not in categories:
        await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ù–∞–∑–∞–¥¬ª")
        return
    
    note_data = await state.get_data()
    note = {
        "text": note_data.get("note_text", ""),
        "task_id": note_data.get("task_id", 0),
        "category": message.text,
        "created": str(datetime.now())
    }
    notes.append(note)
    save_data({"tasks": tasks, "notes": notes, "categories": categories, "statistics": statistics})
    
    await state.clear()
    await message.answer(
        "‚úÖ –ù–æ—Ç–∞—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        reply_markup=get_main_menu_kb()
    )

# –ü–µ—Ä–µ–≥–ª—è–¥ –Ω–æ—Ç–∞—Ç–æ–∫
@dp.message(F.text == "üßæ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ—Ç–∞—Ç–∫–∏")
async def show_notes(message: types.Message):
    if not notes:
        await message.answer("‚ùå –ù–æ—Ç–∞—Ç–æ–∫ –ø–æ–∫–∏ –Ω–µ–º–∞—î.", reply_markup=get_main_menu_kb())
        return
    
    notes_list = []
    for i, note in enumerate(notes):
        task_text = tasks[note.get("task_id", 0)].get("text", "–ù–µ–≤—ñ–¥–æ–º–∞ –∑–∞–¥–∞—á–∞")
        notes_list.append(f"{i+1}. {note['text']} (–¥–æ –∑–∞–¥–∞—á—ñ: '{task_text}', {note['category']})")
    
    await message.answer(
        f"üßæ –í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏:\n" + "\n".join(notes_list),
        reply_markup=get_back_kb()
    )

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á
@dp.message(F.text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É")
async def delete_task_start(message: types.Message, state: FSMContext):
    if not tasks:
        await message.answer("‚ùå –ù–µ–º–∞—î –∑–∞–¥–∞—á –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", reply_markup=get_main_menu_kb())
        return
    
    tasks_list = "\n".join(f"{i+1}. {task['text']} ‚Äî {task['deadline']}" for i, task in enumerate(tasks))
    await state.set_state(TaskStates.waiting_for_task_delete)
    await message.answer(
        f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n{tasks_list}\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á—ñ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚óÄÔ∏è –ù–∞–∑–∞–¥'",
        reply_markup=get_back_kb()
    )

@dp.message(TaskStates.waiting_for_task_delete)
async def process_task_delete(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    if message.text.isdigit():
        task_num = int(message.text) - 1
        if 0 <= task_num < len(tasks):
            deleted_task = tasks.pop(task_num)
            # –í–∏–¥–∞–ª—è—î–º–æ –Ω–æ—Ç–∞—Ç–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ —Ü—ñ—î—é –∑–∞–¥–∞—á–µ—é
            global notes
            notes = [note for note in notes if note.get("task_id", -1) != task_num]
            # –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó –∑–∞–¥–∞—á—ñ
            try:
                scheduler.remove_job(f"reminder_{message.chat.id}_{task_num}")
            except Exception:
                pass
            save_data({"tasks": tasks, "notes": notes, "categories": categories, "statistics": statistics})
            await message.answer(
                f"‚úÖ –ó–∞–¥–∞—á—É –≤–∏–¥–∞–ª–µ–Ω–æ: {deleted_task['text']} ‚Äî {deleted_task['deadline']}",
                reply_markup=get_main_menu_kb()  # –î–æ–¥–∞–Ω–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            )
            await state.clear()  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        else:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_back_kb())
    else:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á—ñ.", reply_markup=get_back_kb())

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫
@dp.message(F.text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
async def delete_note_start(message: types.Message, state: FSMContext):
    if not notes:
        await message.answer("‚ùå –ù–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", reply_markup=get_main_menu_kb())
        return
    
    notes_list = "\n".join(f"{i+1}. {note['text']}" for i, note in enumerate(notes))
    await state.set_state(NoteStates.waiting_for_note_delete)
    await message.answer(
        f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n{notes_list}\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚óÄÔ∏è –ù–∞–∑–∞–¥'",
        reply_markup=get_back_kb()
    )

@dp.message(NoteStates.waiting_for_note_delete)
async def process_note_delete(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    if message.text.isdigit():
        note_num = int(message.text) - 1
        if 0 <= note_num < len(notes):
            deleted_note = notes.pop(note_num)
            save_data({"tasks": tasks, "notes": notes, "categories": categories, "statistics": statistics})
            await state.clear()
            await message.answer(
                f"‚úÖ –ù–æ—Ç–∞—Ç–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ: {deleted_note['text']}",
                reply_markup=get_main_menu_kb()
            )
        else:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    else:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏.")

@dp.message(F.text == "‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
async def set_reminder_start(message: types.Message, state: FSMContext):
    if not tasks:
        await message.answer("‚ùå –ù–µ–º–∞—î –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.", reply_markup=get_main_menu_kb())
        return
    
    active_tasks = [t for t in tasks if not t.get("completed", False)]
    if not active_tasks:
        await message.answer("‚ùå –í—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ.", reply_markup=get_main_menu_kb())
        return
    
    await state.set_state(ReminderStates.waiting_for_reminder_task)
    await message.answer(
        "üìå –û–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_tasks_kb(completed=False)
    )

@dp.message(ReminderStates.waiting_for_reminder_task)
async def process_reminder_task(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    if message.text.split(". ")[0].isdigit():
        task_num = int(message.text.split(". ")[0]) - 1
        if 0 <= task_num < len(tasks) and not tasks[task_num].get("completed", False):
            await state.update_data(task_num=task_num)
            await state.set_state(ReminderStates.waiting_for_reminder_time)
            await message.answer(
                "‚è∞ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '15.12 14:30' –∞–±–æ '—á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏'):\n"
                "–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏'",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            return
    
    await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ù–∞–∑–∞–¥¬ª", reply_markup=get_back_kb())

@dp.message(ReminderStates.waiting_for_reminder_time)
async def process_reminder_time(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    if message.text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu_kb())
        return
    
    reminder_data = await state.get_data()
    task_num = reminder_data.get("task_num")
    task = tasks[task_num]
    
    try:
        now = datetime.now()
        if "—á–µ—Ä–µ–∑" in message.text.lower():
            parts = message.text.lower().split()
            try:
                num = int(parts[1])
                if "–≥–æ–¥" in parts[2]:
                    delta = timedelta(hours=num)
                elif "—Ö–≤" in parts[2]:
                    delta = timedelta(minutes=num)
                else:
                    raise ValueError
                reminder_time = now + delta
            except (IndexError, ValueError):
                raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É")
        else:
            try:
                # –°–ø—Ä–æ–±–∞ –ø–∞—Ä—Å–∏–Ω–≥—É "–¥–¥.–º–º –≥–≥:—Ö—Ö"
                reminder_time = datetime.strptime(message.text, "%d.%m %H:%M").replace(year=now.year)
                if reminder_time < now:
                    reminder_time = reminder_time.replace(year=now.year + 1)
            except ValueError:
                try:
                    # –°–ø—Ä–æ–±–∞ –ø–∞—Ä—Å–∏–Ω–≥—É "–≥–≥:—Ö—Ö"
                    reminder_time = datetime.strptime(message.text, "%H:%M")
                    reminder_time = now.replace(hour=reminder_time.hour, minute=reminder_time.minute)
                    if reminder_time < now:
                        reminder_time += timedelta(days=1)
                except ValueError:
                    raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        try:
            scheduler.remove_job(f"reminder_{message.chat.id}_{task_num}")
        except Exception:
            pass
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        scheduler.add_job(
            send_reminder,
            DateTrigger(run_date=reminder_time),
            args=(message.chat.id, f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task['text']}\n–î–µ–¥–ª–∞–π–Ω: {task.get('deadline', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"),
            id=f"reminder_{message.chat.id}_{task_num}"
        )
        
        await message.answer(
            f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%d.%m %H:%M')}",
            reply_markup=get_main_menu_kb()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
            "- '15.12 14:30' (–¥–∞—Ç–∞ —ñ —á–∞—Å)\n"
            "- '14:30' (—á–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ)\n"
            "- '—á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏'\n"
            "- '—á–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω'\n\n"
            "–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@dp.message(~F.text)
async def handle_non_text(message: types.Message):
    await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text.in_(["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚Üî –ù–∞–∑–∞–¥", "–ù–∞–∑–∞–¥"]))
async def handle_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=get_main_menu_kb()
    )

# –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–∞—Ä—Å–∏–Ω–≥—É –¥–µ–¥–ª–∞–π–Ω—ñ–≤
def parse_deadline(deadline_str):
    if not deadline_str:
        return None
    
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ dateparser –¥–ª—è –≥–Ω—É—á–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É
        parsed_date = dateparser.parse(
            deadline_str,
            languages=['uk', 'ru', 'en'],
            settings={'PREFER_DATES_FROM': 'future'}
        )
        
        if parsed_date:
            # –Ø–∫—â–æ –¥–∞—Ç–∞ –≤ –º–∏–Ω—É–ª–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è "15.12"), –¥–æ–¥–∞—î–º–æ —Ä—ñ–∫
            if parsed_date < datetime.now():
                if len(deadline_str) <= 5:  # –§–æ—Ä–º–∞—Ç–∏ —Ç–∏–ø—É "15.12" –∞–±–æ "14:30"
                    if ':' in deadline_str:  # –ß–∞—Å –±–µ–∑ –¥–∞—Ç–∏
                        parsed_date = parsed_date.replace(year=datetime.now().year + 1)
                    else:  # –î–∞—Ç–∞ –±–µ–∑ —Ä–æ–∫—É
                        parsed_date = parsed_date.replace(year=datetime.now().year + 1)
            
            return parsed_date
        
        return None
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–µ–¥–ª–∞–π–Ω—É '{deadline_str}': {e}")
        return None

# –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def process_reminder_time(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu_kb())
        return
    
    if message.text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu_kb())
        return
    
    reminder_data = await state.get_data()
    task_num = reminder_data.get("task_num")
    
    if not (0 <= task_num < len(tasks)):
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    task = tasks[task_num]
    
    try:
        reminder_time = parse_deadline(message.text)
        if not reminder_time:
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É")
        
        if reminder_time < datetime.now():
            await message.answer("‚ùå –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∂–µ –º–∏–Ω—É–≤. –í–≤–µ–¥—ñ—Ç—å –º–∞–π–±—É—Ç–Ω—é –¥–∞—Ç—É/—á–∞—Å.")
            return
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        try:
            scheduler.remove_job(f"reminder_{message.chat.id}_{task_num}")
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        scheduler.add_job(
            send_reminder,
            DateTrigger(run_date=reminder_time),
            args=(message.chat.id, f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task['text']}\n–î–µ–¥–ª–∞–π–Ω: {task.get('deadline', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"),
            id=f"reminder_{message.chat.id}_{task_num}"
        )
        
        await message.answer(
            f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_main_menu_kb()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
            "- '15.12.2023 14:30' (–¥–∞—Ç–∞ —ñ —á–∞—Å)\n"
            "- '15.12 14:30' (–¥–∞—Ç–∞ —ñ —á–∞—Å, –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫)\n"
            "- '14:30' (—á–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ/–∑–∞–≤—Ç—Ä–∞)\n"
            "- '—á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏'\n"
            "- '—á–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω'\n"
            "- '–∑–∞–≤—Ç—Ä–∞ –æ 10:00'\n\n"
            "–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

async def manage_messages(chat_id: int, new_message_id: int, bot: Bot):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—î—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∑–±–µ—Ä—ñ–≥–∞—î —Ç—ñ–ª—å–∫–∏ 3 –æ—Å—Ç–∞–Ω–Ω—ñ)"""
    if chat_id not in user_messages:
        user_messages[chat_id] = []
    
    user_messages[chat_id].append(new_message_id)
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —ó—Ö –±—ñ–ª—å—à–µ 3
    while len(user_messages[chat_id]) > 3:
        try:
            oldest_msg = user_messages[chat_id].pop(0)
            await bot.delete_message(chat_id=chat_id, message_id=oldest_msg)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

async def send_reminder(chat_id, text):
    try:
        msg = await bot.send_message(
            chat_id,
            f"<b>{text}</b>",
            parse_mode="HTML"
        )
        await manage_messages(chat_id, msg.message_id, bot)  # –¢–µ–ø–µ—Ä manage_messages –≤–∏–∑–Ω–∞—á–µ–Ω–∞
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")

async def export_to_csv(chat_id):
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(EXPORT_FOLDER, f"tasks_export_{timestamp}.csv")

        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['text', 'deadline', 'category', 'created', 'completed', 'completed_at']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            writer.writeheader()
            for task in tasks:
                writer.writerow(task)

        await bot.send_document(
            chat_id=chat_id,
            document=types.FSInputFile(filename),
            caption='üìä –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á —É CSV'
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –≤ CSV: {e}")
        await bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –≤ CSV")

async def on_startup():
    try:
        scheduler.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
        # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
        for i, task in enumerate(tasks):
            if not task.get("completed", False) and task.get("deadline"):
                deadline = parse_deadline(task["deadline"])
                if deadline and deadline > datetime.now():
                    scheduler.add_job(
                        send_reminder,
                        DateTrigger(run_date=deadline),
                        args=("global", f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task['text']}\n–î–µ–¥–ª–∞–π–Ω: {task.get('deadline', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"),
                        id=f"reminder_global_{i}"
                    )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")

async def on_shutdown():
    try:
        scheduler.shutdown()
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ: {e}")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    import asyncio
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")